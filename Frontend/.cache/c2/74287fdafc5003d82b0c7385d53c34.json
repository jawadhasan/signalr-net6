{"id":"../node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js","dependencies":[{"name":"C:\\workspace\\gitrepos\\public\\.NET\\signalr-net6\\Frontend\\node_modules\\@microsoft\\signalr\\dist\\esm\\IHubProtocol.js.map","includedInParent":true,"mtime":1669386455832},{"name":"C:\\workspace\\gitrepos\\public\\.NET\\signalr-net6\\Frontend\\package.json","includedInParent":true,"mtime":1669299727015},{"name":"C:\\workspace\\gitrepos\\public\\.NET\\signalr-net6\\Frontend\\node_modules\\@microsoft\\signalr\\package.json","includedInParent":true,"mtime":1669386447291}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageType = void 0;\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\n/** Defines the type of a Hub Message. */\nvar MessageType;\nexports.MessageType = MessageType;\n\n(function (MessageType) {\n  /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\n  MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\n  /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\n\n  MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\n  /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\n\n  MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\n  /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\n\n  MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\n  /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\n\n  MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\n  /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\n\n  MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\n  /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\n\n  MessageType[MessageType[\"Close\"] = 7] = \"Close\";\n})(MessageType || (exports.MessageType = MessageType = {}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":11,"column":4}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":11,"column":15}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":1}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":14,"column":11}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":14,"column":22}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":23},"generated":{"line":14,"column":24}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":15,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":38}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":39}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":42}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":43}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":44}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":47}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":10,"column":4},"generated":{"line":16,"column":59}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":11,"column":4},"generated":{"line":17,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":38}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":39}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":42}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":43}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":44}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":47}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":19,"column":59}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":13,"column":4},"generated":{"line":20,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":38}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":39}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":42}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":43}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":44}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":47}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":14,"column":4},"generated":{"line":22,"column":59}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":15,"column":4},"generated":{"line":23,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":44}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":45}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":48}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":49}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":50}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":53}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":25,"column":71}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":17,"column":4},"generated":{"line":26,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":44}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":45}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":48}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":49}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":50}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":53}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":28,"column":71}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":19,"column":4},"generated":{"line":29,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":32}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":33}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":36}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":37}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":38}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":41}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":31,"column":47}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":21,"column":4},"generated":{"line":32,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":2}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":13}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":25}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":26}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":33}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":34}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":37}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":38}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":39}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":42}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":22,"column":4},"generated":{"line":34,"column":49}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":23,"column":1},"generated":{"line":35,"column":0}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":35,"column":1}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":35,"column":3}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":23},"generated":{"line":35,"column":14}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":12},"generated":{"line":35,"column":41}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":23},"generated":{"line":35,"column":52}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":23},"generated":{"line":35,"column":55}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":23},"generated":{"line":35,"column":57}},{"source":"../../src/IHubProtocol.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":35,"column":58}}],"sources":{"../../src/IHubProtocol.ts":"// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"5daeaa6cdff1e8f24de5b6df1d2894a4","cacheData":{"env":{}}}